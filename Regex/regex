
regex

Regular Expression,正则表达式

1, 正则表达式的语法
    正则表达式的语法分为4部分
       1.正则定界符
       2.正则表达式中的原子
       3.正则表达式的元字符（原子修饰符）
       4.正则表达式的模式修正符

2, 定界符
	是用来声明正则表达式的边界符号
	常用的是'/'
	实际上数字，字母，'\' 之外都可以
    ~~ !! @@ ## $$ %% ^^ && ** () {} :: ;;
    推荐使用 //

	注意:
		正则表达式有两个定界符
		一个是字符串的  引号边界符
		一个是正则的  定界符

3, 原子
    正则中原子也是最小的单位,原子包括:
        所有可见的字符

        大部分不可见字符

		1.普通字符: 字母 数字 下划线
		2.特殊字符: ~ ! @ # $ % ^ & * ( ) _ +
		3.非打印字符:
			\f  --  分页符
			\n  --  换行符
			\r  --  回车符
			\t  --  制表符
			\v  --  垂直制表符

4, 元字符
    \d      匹配所有数字
    \D      匹配非数字
    \s      匹配所有空白字符 如：空格 \n \t \f
    \S      匹配所有非空白字符
    \w      匹配字母数字下划线
    \W      匹配非字母数字下划线
    .       匹配所有，除了 \n
    转义字符 \V

    #       原子修饰符
    []      原子列表
    [abcdef] 可选列表 只能匹配原子列表中的一个字符
    [5-9]   连续的字符 5,6,7,8,9
    [^abc]  排除列表  除了里面的都可以

    # 原子数量修饰符
    +       表示一个或者多个
    ?       表示0个或一个
    *       表示0个一个或者多个
    {}
    {m,n}   表示m到n个
    {m,}    表示m个以上
    {m}     表示m个

    # 词边界修饰符(词边界:可以分割单词的都是，非字母数字下划线)
    \b      词边界
    \B      非词边界
    注意:词边界只对英文有效


    # 字符串边界
	^       以指定字符开头的
	$       以指定字符结尾的
	^字符串$   精确匹配字符串

    # 选择修饰符
	|       逻辑或
            /a|b/         匹配a或者b
            /abc|def/     匹配abc  或者def  字符串的结合优先级高于选择
            /ab(c|d)ef/   匹配abcef   或者abdef

    # 模式单元
	()      改变优先级
            将多个原子视为一个原子
            将匹配的内容暂存在内存
            可以将括号的内容在函数的辅助下反向引用
            // 后向引用，是目标字符串中有重复内容的时候，可以这么用。如果只是模式一样，那是不行的。

5, 模式修正符
	i       忽略大小写
	x       忽略正则表达式空白
	s       使得元字符 . 可以匹配\n .匹配\n . s 将字符串视为单行,换行符作为普通字符;
	m       视为多行处理   这个模式下 ^字符串$  可以识别 \n .不匹配\n. m 将字符串视为多行,不管是那行都能匹配;
    U       改变贪婪模式，默认就是贪婪模式
            关于贪婪模式: .*?     默认没有贪婪模式