Python3 

1,基础语法
	1.1 标识符
		1)第一个字符必须是字母表中字母或下划线'_'。
		2)标识符的其他的部分有字母、数字和下划线组成。
		3)标识符对大小写敏感。
		4)在Python 3中，非-ASCII 标识符也是允许的了。
	1.2 保留字
		输出当前版本的所有关键字：	>>> import keyword
									>>> keyword.kwlist
	1.3 行与缩进
		1)python最具特色的就是使用缩进来表示代码块，不需要使用大括号({})。
		2)缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。
	1.4 多行语句
		1)Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠(\)来实现多行语句
		2)在 [], {}, 或 () 中的多行语句，不需要使用反斜杠(\)
	1.5 同一行显示多条语句
		Python可以在同一行中使用多条语句，语句之间使用分号(;)分割，
2,基本数据类型
	2.1 多个变量赋值
		Python允许你同时为多个变量赋值。例如：a = b = c = 1;a, b = 1, 2
	2.2 标准数据类型
		2.2.1 Number（数字）
			Python3 支持 int、float、bool、complex（复数）
			内置的type()函数可以用来查询变量所指的对象类型。
			您也可以使用del语句删除一些对象引用。例如：del var_a, var_b
			Python支持复数，用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型
			函数:
				数学函数:
					abs(x)			返回数字的绝对值，如abs(-10) 返回 10
					ceil(x)			返回数字的上入整数，如math.ceil(4.1) 返回 5
					cmp(x, y)		如果 x < y 返回 -1, 如果 x == y 返回 0, 如果 x > y 返回 1。 Python 3 已废弃 。使用 使用 (x>y)-(x<y) 替换。
					exp(x)			返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045
					fabs(x)			返回数字的绝对值，如math.fabs(-10) 返回10.0
					floor(x)		返回数字的下舍整数，如math.floor(4.9)返回 4
					log(x)			如math.log(math.e)返回1.0,math.log(100,10)返回2.0
					log10(x)		返回以10为基数的x的对数，如math.log10(100)返回 2.0
					max(x1, x2,...)	返回给定参数的最大值，参数可以为序列。
					min(x1, x2,...)	返回给定参数的最小值，参数可以为序列。
					modf(x)			返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。
					pow(x, y)		x**y 运算后的值。
					round(x [,n])	返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。
					sqrt(x)			返回数字x的平方根，数字可以为负数，返回类型为实数，如math.sqrt(4)返回 2+0j
				随机数函数
					choice(seq)		从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。
					randrange ([start,] stop [,step])	从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1
					random()		随机生成下一个实数，它在[0,1)范围内。
					seed([x])		改变随机数生成器的种子seed。
					shuffle(lst)	将序列的所有元素随机排序
					uniform(x, y)	随机生成下一个实数，它在[x,y]范围内。
				三角函数
					acos(x)			返回x的反余弦弧度值。
					asin(x)			返回x的反正弦弧度值。	
					atan(x)			返回x的反正切弧度值。
					atan2(y, x)		返回给定的 X 及 Y 坐标值的反正切值。
					cos(x)			返回x的弧度的余弦值。
					hypot(x, y)		返回欧几里德范数 sqrt(x*x + y*y)。
					sin(x)			返回的x弧度的正弦值。
					tan(x)			返回x弧度的正切值。
					degrees(x)		将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0
					radians(x)		将角度转换为弧度
				数学常量
					pi				数学常量 pi（圆周率，一般以π来表示）
					e				数学常量 e，e即自然常数（自然常数）。
		2.2.2 String（字符串）
			字符串用单引号(')或双引号(")括起来，使用反斜杠(\)转义特殊字符。
			字符串的截取的语法格式如下：变量[头下标:尾下标]. 索引值以 0 为开始值，-1 为从末尾的开始位置。
			加号 (+) 是字符串的连接符， 星号 (*) 表示复制当前字符串，紧跟的数字为复制的次数。
			字符串前面添加一个 r，表示原始字符串,不让反斜杠发生转义
			Python 没有单独的字符类型，一个字符就是长度为1的字符串。
			Python 字符串不能被改变。向一个索引位置赋值，比如word[0] = 'm'会导致错误。
			python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。
			字符串运算符:
				1	
				capitalize()
				将字符串的第一个字符转换为大写
				2	
				center(width, fillchar)
				返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。
				3	
				count(str, beg= 0,end=len(string))
				返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数
				4	
				decode(encoding='UTF-8',errors='strict')
				使用指定编码来解码字符串。默认编码为字符串编码。
				5	
				encode(encoding='UTF-8',errors='strict')
				以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是'ignore'或者'replace'
				6	
				endswith(suffix, beg=0, end=len(string))
				检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.
				7	
				expandtabs(tabsize=8)
				把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。
				8	
				find(str, beg=0 end=len(string))
				检测 str 是否包含在字符串中 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1
				9	
				index(str, beg=0, end=len(string))
				跟find()方法一样，只不过如果str不在字符串中会报一个异常.
				10	
				isalnum()
				如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False
				11	
				isalpha()
				如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False
				12	
				isdigit()
				如果字符串只包含数字则返回 True 否则返回 False..
				13	
				islower()
				如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False
				14	
				isnumeric()
				如果字符串中只包含数字字符，则返回 True，否则返回 False
				15	
				isspace()
				如果字符串中只包含空格，则返回 True，否则返回 False.
				16	
				istitle()
				如果字符串是标题化的(见 title())则返回 True，否则返回 False
				17	
				isupper()
				如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False
				18	
				join(seq)
				以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串
				19	
				len(string)
				返回字符串长度
				20	
				ljust(width[, fillchar])
				返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。
				21	
				lower()
				转换字符串中所有大写字符为小写.
				22	
				lstrip()
				截掉字符串左边的空格
				23	
				maketrans()
				创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。
				24	
				max(str)
				返回字符串 str 中最大的字母。
				25	
				min(str)
				返回字符串 str 中最小的字母。
				26	
				replace(old, new [, max])
				把 将字符串中的 str1 替换成 str2,如果 max 指定，则替换不超过 max 次。
				27	
				rfind(str, beg=0,end=len(string))
				类似于 find()函数，不过是从右边开始查找.
				28	
				rindex( str, beg=0, end=len(string))
				类似于 index()，不过是从右边开始.
				29	
				rjust(width,[, fillchar])
				返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串
				30	
				rstrip()
				删除字符串字符串末尾的空格.
				31	
				split(str="", num=string.count(str))
				num=string.count(str)) 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num 个子字符串
				32	
				splitlines( num=string.count('\n'))
				按照行分隔，返回一个包含各行作为元素的列表，如果 num 指定则仅切片 num 个行.
				33	
				startswith(str, beg=0,end=len(string))
				检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。
				34	
				strip([chars])
				在字符串上执行 lstrip()和 rstrip()
				35	
				swapcase()
				将字符串中大写转换为小写，小写转换为大写
				36	
				title()
				返回"标题化"的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())
				37	
				translate(table, deletechars="")
				根据 str 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中
				38	
				upper()
				转换字符串中的小写字母为大写
				39	
				zfill (width)
				返回长度为 width 的字符串，原字符串右对齐，前面填充0
				40	
				isdecimal()
				检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。
		2.2.3 List（列表）
			列表是写在方括号([])之间、用逗号分隔开的元素列表。
			列表中元素的类型可以不相同，它支持数字,字符串,列表（嵌套）
			列表可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。
			列表中的元素是可以改变的
			加号（+）是列表连接运算符，星号（*）是重复操作。
			更新列表：
				del 删除列表元素
				脚本操作符
				len([1, 2, 3])	3	长度
				[1, 2, 3] + [4, 5, 6]	[1, 2, 3, 4, 5, 6]	组合
				['Hi!'] * 4	['Hi!', 'Hi!', 'Hi!', 'Hi!']	重复
				3 in [1, 2, 3]	True	元素是否存在于列表中
				for x in [1, 2, 3]: print x,	1 2 3	迭代
				截取与拼接（L=['Google', 'Runoob', 'Taobao']）
				L[2]	'Taobao'	读取第三个元素
				L[-2]	'Runoob'	从右侧开始读取倒数第二个元素: count from the right
				L[1:]	['Runoob', 'Taobao']	输出从第二个元素开始后的所有元素
				函数&方法
				len(list)	列表元素个数
				max(list)	返回列表元素最大值
				min(list)	返回列表元素最小值
				list(seq)	将元组转换为列表
				list.append(obj)		在列表末尾添加新的对象
				list.count(obj)			统计某个元素在列表中出现的次数
				list.extend(seq)		在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）
				list.index(obj)			从列表中找出某个值第一个匹配项的索引位置
				list.insert(index, obj)	将对象插入列表
				list.pop(obj=list[-1])	移除列表中的一个元素（默认最后一个元素），并且返回该元素的值
				list.remove(obj)		移除列表中某个值的第一个匹配项
				list.reverse()			反向列表中元素
				list.sort([func])		对原列表进行排序
				list.clear()			清空列表
				list.copy()				复制列表
				
		2.2.4 Tuple（元组）
			元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号()里，元素之间用逗号隔开。
			创建空元组:tup1 = (),元组中只包含一个元素时，需要在元素后面添加逗号:tup1 = (50,).
			元组运算符:
				len((1, 2, 3))	3	计算元素个数
				(1, 2, 3) + (4, 5, 6)	(1, 2, 3, 4, 5, 6)	连接
				['Hi!'] * 4	['Hi!', 'Hi!', 'Hi!', 'Hi!']	复制
				3 in (1, 2, 3)	True	元素是否存在
				for x in (1, 2, 3): print x,	1 2 3	迭代
			元组内置函数:
				len(tuple)		计算元组元素个数。
				max(tuple)		返回元组中元素最大值。	
				min(tuple)		返回元组中元素最小值。
				tuple(seq)		将列表转换为元组。
		2.2.5 Set（集合）
			集合（set）是一个无序不重复元素的序列。
			基本功能是进行成员关系测试和删除重复元素。
			可以使用大括号({})或者 set()函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }。
		2.2.6 Dictionary（字典）
			字典是一种映射类型，字典用"{ }"标识，它是一个无序的键(key) : 值(value)对集合。
			创建空字典使用 { }。
			字典的关键字必须为不可变类型，且不能重复。
			内置函数&方法:
				len(dict)		计算字典元素个数，即键的总数。
				str(dict)		输出字典以可打印的字符串表示。	
				type(variable)	返回输入的变量类型，如果变量是字典就返回字典类型。
				radiansdict.clear()		删除字典内所有元素
				radiansdict.copy()		返回一个字典的浅复制
				radiansdict.fromkeys()	创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值
				radiansdict.get(key, default=None)	返回指定键的值，如果值不在字典中返回default值
				key in dict				如果键在字典dict里返回true，否则返回false
				radiansdict.items()		以列表返回可遍历的(键, 值) 元组数组,for k, v in radiansdict.items():
				radiansdict.keys()		以列表返回一个字典所有的键
				radiansdict.setdefault(key, default=None)和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default
				radiansdict.update(dict2)把字典dict2的键/值对更新到dict里
				radiansdict.values()	以列表返回字典中的所有值
3,注释
	单行注释以#开头
	多行注释用三个单引号（'''）或者三个双引号（"""）将注释括起来
4,运算符
	4.1 算术运算符
			以下假设变量a为10，变量b为21：
		+	加 - 两个对象相加	a + b 输出结果 31
		-	减 - 得到负数或是一个数减去另一个数	a - b 输出结果 -11
		*	乘 - 两个数相乘或是返回一个被重复若干次的字符串	a * b 输出结果 210
		/	除 - x 除以 y	b / a 输出结果 2.1
		%	取模 - 返回除法的余数	b % a 输出结果 1
		**	幂 - 返回x的y次幂	a**b 为10的21次方
		//	取整除 - 返回商的整数部分	9//2 输出结果 4 , 9.0//2.0 输出结果 4.0
	4.2 比较运算符
			以下假设变量a为10，变量b为20：
		==	等于 - 比较对象是否相等	(a == b) 返回 False。
		!=	不等于 - 比较两个对象是否不相等	(a != b) 返回 true.
		>	大于 - 返回x是否大于y	(a > b) 返回 False。
		<	小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。	(a < b) 返回 true。
		>=	大于等于 - 返回x是否大于等于y。	(a >= b) 返回 False。
		<=	小于等于 - 返回x是否小于等于y。	(a <= b) 返回 true。
	4.3 赋值运算符
			以下假设变量a为10，变量b为20：
		=	简单的赋值运算符	c = a + b 将 a + b 的运算结果赋值为 c
		+=	加法赋值运算符	c += a 等效于 c = c + a
		-=	减法赋值运算符	c -= a 等效于 c = c - a
		*=	乘法赋值运算符	c *= a 等效于 c = c * a
		/=	除法赋值运算符	c /= a 等效于 c = c / a
		%=	取模赋值运算符	c %= a 等效于 c = c % a
		**=	幂赋值运算符	c **= a 等效于 c = c ** a
		//=	取整除赋值运算符	c //= a 等效于 c = c // a
	4.4 位运算符
			下表中变量 a 为 60，b 为 13。
		&	按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0	(a & b) 输出结果 12 ，二进制解释： 0000 1100
		|	按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。	(a | b) 输出结果 61 ，二进制解释： 0011 1101
		^	按位异或运算符：当两对应的二进位相异时，结果为1	(a ^ b) 输出结果 49 ，二进制解释： 0011 0001
		~	按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1	(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。
		<<	左移动运算符：运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。	a << 2 输出结果 240 ，二进制解释： 1111 0000
		>>	右移动运算符：把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数	a >> 2 输出结果 15 ，二进制解释： 0000 1111
	4.5 逻辑运算符
			Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:
		and	x and y	布尔"与" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。	(a and b) 返回 20。
		or	x or y	布尔"或" - 如果 x 是 True，它返回 True，否则它返回 y 的计算值。	(a or b) 返回 10。
		not	not x	布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。	not(a and b) 返回 False
	4.6 成员运算符
		in	如果在指定的序列中找到值返回 True，否则返回 False。	x 在 y 序列中 , 如果 x 在 y 序列中返回 True。
		not in	如果在指定的序列中没有找到值返回 True，否则返回 False。	x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。
	4.7 身份运算符
		is	is是判断两个标识符是不是引用自一个对象	x is y, 如果 id(x) 等于 id(y) , is 返回结果 1
		is not	is not是判断两个标识符是不是引用自不同对象	x is not y, 如果 id(x) 不等于 id(y). is not 返回结果 1
	4.8 运算符优先级
		以下表格列出了从最高到最低优先级的所有运算符：
		**							指数 (最高优先级)
		~ + -						按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)
		* / % //					乘，除，取模和取整除
		+ -							加法减法
		>> <<						右移，左移运算符
		&							位 'AND'
		^ |							位运算符
		<= < > >=					比较运算符
		<> == !=					等于运算符
		= %= /= //= -= += *= **=	赋值运算符
		is is not					身份运算符
		in not in					成员运算符
		not or and					逻辑运算符
5,控制
	5.1 条件控制形式如下所示：
			if condition_1:
				statement_block_1
			elif condition_2:
				statement_block_2
			else:
				statement_block_3
		注意：
			1、每个条件后面要使用冒号（:），表示接下来是满足条件后要执行的语句块。
			2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。
			3、在Python中没有switch – case语句。
	5.2 循环语句
		5.2.1 while语句的一般形式：
			while 判断条件：
				语句
			[else:]
				语句
		5.2.2 for 语句
			for <variable> in <sequence>:
				<statements>
			else:
				<statements>
			break 语句用于跳出当前循环体,任何对应的循环 else 块将不执行。
			continue语句被用来告诉Python跳过当前循环块中的剩余语句，然后继续进行下一轮循环。
			pass是空语句,不做任何事情，一般用做占位语句，
6,迭代器与生成器
	6.1 迭代器
		迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。
		迭代器有两个基本的方法：iter() 和 next()。
		字符串，列表或元组对象都可用于创建迭代器:
			>>> list=[1,2,3,4]
			>>> it = iter(list)    # 创建迭代器对象
			>>> print (next(it))   # 输出迭代器的下一个元素
	6.2 生成器
		使用了 yield 的函数被称为生成器（generator）
		生成器是一个返回迭代器的函数，只能用于迭代操作
		生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回yield的值。
		并在下一次执行 next()方法时从当前位置继续运行。
7,函数
	7.1 定义
		函数代码块以 def 关键词开头，后接函数标识符名称和圆括号 ()。
		任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。
		函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。
		函数内容以冒号起始，并且缩进。
		return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。
		格式如下：
			def 函数名（参数列表）:
				函数体
	7.2 函数调用
		在 Python 中，所有参数（变量）都是按引用传递。
		参数:
			必需参数:必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。
			关键字参数:使用关键字参数允许函数调用时参数的顺序与声明时不一致,函数调用使用关键字参数来确定传入的参数值。
				#可写函数说明
				def printinfo( name, age ):
				   print ("名字: ", name);
				   print ("年龄: ", age);
				   return;
				#调用printinfo函数
				printinfo( age=50, name="runoob" );
			默认参数:调用函数时，如果没有传递参数，则会使用默认参数。
				#可写函数说明
				def printinfo( name, age = 35 ):
				   print ("名字: ", name);
				   print ("年龄: ", age);
				   return;
				#调用printinfo函数
				printinfo( name="runoob" );
			不定长参数:
				语法如下：
					def functionname([formal_args,] *var_args_tuple ):
					   function_suite
					   return [expression]
				加了星号（*）的变量名会存放所有未命名的变量参数。
					# 可写函数说明
					def printinfo( arg1, *vartuple ):
					   print ("输出: ")
					   print (arg1)
					   for var in vartuple:
						  print (var)
					   return;
					# 调用printinfo 函数
					printinfo( 70, 60, 50 );
	7.3 匿名函数
		python 使用 lambda 来创建匿名函数。
		lambda的主体是一个表达式，
		lambda 函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。
			lambda [arg1 [,arg2,.....argn]]:expression
8 数据结构
	
			
			
			